#Creando una clase en python

class Person: 
	def __init__(self, nombre, edad, ciudad):
		self.nombre = nombre
		self.edad = edad
		self.ciudad = ciudad

	def mostrarInfo(self):
		return f"{self.nombre} {self.edad} {self.ciudad}"
	

# Se crean objetos en python 

personaUno = Person('Pedro', 25, 'Medellin')
personaDos = Person('Maria', 40, 'Bogota')

# Se imprimen y se muestran los atributos con mostrarInfo()

print(personaUno.mostrarInfo())
print(personaDos.mostrarInfo())




#Herencia 



class Profesor (Person):
	def __init__(self, nombre, edad, ciudad, asignatura):
		super().__init__(nombre, edad, ciudad)
		self.asignatura = asignatura
	
	def mostrarInfo(self):
		return f"El profesor {self.nombre} enseña la materia de {self.asignatura}"
	

profesorUno = Profesor('Jose', 33, 'Medellin', 'Programación Avanzada')
profesorDos = Profesor('Luis', 43, 'Cali', 'Moviles')

print(profesorUno.mostrarInfo())
print(profesorDos.mostrarInfo())




#Polimorfismo 



class Mascota:
	def __init__(self, nombre):
		self.nombre= nombre
	
	def hablar(self):
		pass
		
class Perro(Mascota):
	def hablar(self):
		return "Wooff"

class Gato(Mascota):
	def hablar(self):
		return "Meow"

class Marrano(Mascota):
	def hablar(self):
		return "ñomñomñom"
	
mis_mascotas =[Perro("Doggo"), Gato("Bruce"), Marrano("Loco")]

for Mascota in mis_mascotas:
	print (f"{Mascota.nombre} dice {Mascota.hablar()}")



#Encapsulamiento 



class BankAccount:
    def __init__(self, account_number, balance):
        self.__account_number = account_number
        self.__balance = balance

    def get_balance(self):
        return self.__balance

    def deposit(self, amount):
        self.__balance += amount

    def withdraw(self, amount):
        if amount <= self.__balance:
            self.__balance -= amount
        else:
            print("Insufficient funds")

my_account = BankAccount("12345", 10000)
print(f'La cuenta tenía un saldo de: {my_account.get_balance()}')  # Output: 1000
my_account.withdraw(7750)
print(f'Después del reitiro, la cuenta ha quedado con un saldo de: {my_account.get_balance()}')  # Output: 500

